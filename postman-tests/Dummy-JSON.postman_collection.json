{
	"info": {
		"_postman_id": "23ee1f07-1c1c-46b1-8e46-79aae13d9ae9",
		"name": "Dummy-JSON",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17644856"
	},
	"item": [
		{
			"name": "Get All Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// --------------------",
							"// ✅ STATUS & PERFORMANCE TESTS",
							"// --------------------",
							"",
							"pm.test(\"Response code is 200\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is under 500ms\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"// --------------------",
							"// 📦 PARSE RESPONSE",
							"// --------------------",
							"",
							"const jsonData = pm.response.json();",
							"const users = jsonData.users;",
							"",
							"// --------------------",
							"// 🏗️ STRUCTURE TESTS",
							"// --------------------",
							"",
							"pm.test(\"Response is an object\", () => {",
							"    pm.expect(jsonData).to.be.an(\"object\");",
							"});",
							"",
							"pm.test(\"Users is an array\", () => {",
							"    pm.expect(users).to.be.an(\"array\");",
							"});",
							"",
							"pm.test(\"Each user contains required fields\", () => {",
							"    const requiredFields = [",
							"        \"id\", \"firstName\", \"lastName\", \"email\", \"phone\", \"username\", \"password\", \"age\", \"gender\",",
							"        \"birthDate\", \"image\", \"bloodGroup\", \"height\", \"weight\", \"eyeColor\", \"hair\", \"ip\", \"address\",",
							"        \"macAddress\", \"university\", \"bank\", \"company\", \"ein\", \"ssn\", \"userAgent\", \"crypto\", \"role\"",
							"    ];",
							"    const hairFields = [\"color\", \"type\"];",
							"    const addressFields = [\"address\", \"city\", \"state\", \"stateCode\", \"postalCode\", \"coordinates\", \"country\"];",
							"    const coordinatesFields = [\"lat\", \"lng\"];",
							"    const bankFields = [\"cardExpire\", \"cardNumber\", \"cardType\", \"currency\", \"iban\"];",
							"    const companyFields = [\"department\", \"name\", \"title\", \"address\"];",
							"    const companyAddressFields = [\"address\", \"city\", \"state\", \"stateCode\", \"postalCode\", \"coordinates\"];",
							"    const companyCoordinatesFields = [\"lat\", \"lng\"];",
							"    const cryptoFields = [\"coin\", \"wallet\", \"network\"];",
							"",
							"    users.forEach(user => {",
							"        // Check top-level required fields",
							"        requiredFields.forEach(field => {",
							"            pm.expect(user).to.have.property(field);",
							"        });",
							"",
							"        // Check nested hair fields",
							"        hairFields.forEach(field => {",
							"            pm.expect(user.hair).to.have.property(field);",
							"        });",
							"",
							"        // Check nested address fields",
							"        addressFields.forEach(field => {",
							"            pm.expect(user.address).to.have.property(field);",
							"        });",
							"",
							"        // Check address.coordinates fields",
							"        coordinatesFields.forEach(field => {",
							"            pm.expect(user.address.coordinates).to.have.property(field);",
							"        });",
							"",
							"        // Check bank fields",
							"        bankFields.forEach(field => {",
							"            pm.expect(user.bank).to.have.property(field);",
							"        });",
							"",
							"        // Check company fields",
							"        companyFields.forEach(field => {",
							"            pm.expect(user.company).to.have.property(field);",
							"        });",
							"",
							"        // Check company.address fields",
							"        companyAddressFields.forEach(field => {",
							"            pm.expect(user.company.address).to.have.property(field);",
							"        });",
							"",
							"        // Check company.address.coordinates fields",
							"        companyCoordinatesFields.forEach(field => {",
							"            pm.expect(user.company.address.coordinates).to.have.property(field);",
							"        });",
							"",
							"        // Check crypto fields",
							"        cryptoFields.forEach(field => {",
							"            pm.expect(user.crypto).to.have.property(field);",
							"        });",
							"    });",
							"});",
							"",
							"// --------------------",
							"// 🔍 DATA TYPE VALIDATION",
							"// --------------------",
							"",
							"pm.test(\"Each user field has correct data type 🧩\", () => {",
							"    const fieldTypes = [",
							"        { field: \"id\", type: \"number\" },",
							"        { field: \"firstName\", type: \"string\" },",
							"        { field: \"lastName\", type: \"string\" },",
							"        { field: \"maidenName\", type: \"string\" },",
							"        { field: \"age\", type: \"number\" },",
							"        { field: \"gender\", type: \"string\" },",
							"        { field: \"email\", type: \"string\" },",
							"        { field: \"phone\", type: \"string\" },",
							"        { field: \"username\", type: \"string\" },",
							"        { field: \"password\", type: \"string\" },",
							"        { field: \"birthDate\", type: \"string\" },",
							"        { field: \"image\", type: \"string\" },",
							"        { field: \"bloodGroup\", type: \"string\" },",
							"        { field: \"height\", type: \"number\" },",
							"        { field: \"weight\", type: \"number\" },",
							"        { field: \"eyeColor\", type: \"string\" },",
							"        { field: \"ip\", type: \"string\" },",
							"        { field: \"macAddress\", type: \"string\" },",
							"        { field: \"university\", type: \"string\" },",
							"        { field: \"ein\", type: \"string\" },",
							"        { field: \"ssn\", type: \"string\" },",
							"        { field: \"userAgent\", type: \"string\" },",
							"        { field: \"role\", type: \"string\" }",
							"    ];",
							"",
							"    users.forEach(user => {",
							"        // Top-level fields",
							"        fieldTypes.forEach(({ field, type }) => {",
							"            pm.expect(user[field], `Field \"${field}\"`).to.be.a(type);",
							"        });",
							"",
							"        // Nested hair fields",
							"        pm.expect(user.hair.color).to.be.a(\"string\");",
							"        pm.expect(user.hair.type).to.be.a(\"string\");",
							"",
							"        // Nested address fields",
							"        const address = user.address;",
							"        pm.expect(address.address).to.be.a(\"string\");",
							"        pm.expect(address.city).to.be.a(\"string\");",
							"        pm.expect(address.state).to.be.a(\"string\");",
							"        pm.expect(address.stateCode).to.be.a(\"string\");",
							"        pm.expect(address.postalCode).to.be.a(\"string\");",
							"        pm.expect(address.country).to.be.a(\"string\");",
							"        pm.expect(address.coordinates.lat).to.be.a(\"number\");",
							"        pm.expect(address.coordinates.lng).to.be.a(\"number\");",
							"",
							"        // Nested bank fields",
							"        const bank = user.bank;",
							"        pm.expect(bank.cardExpire).to.be.a(\"string\");",
							"        pm.expect(bank.cardNumber).to.be.a(\"string\");",
							"        pm.expect(bank.cardType).to.be.a(\"string\");",
							"        pm.expect(bank.currency).to.be.a(\"string\");",
							"        pm.expect(bank.iban).to.be.a(\"string\");",
							"",
							"        // Nested company fields",
							"        const company = user.company;",
							"        pm.expect(company.department).to.be.a(\"string\");",
							"        pm.expect(company.name).to.be.a(\"string\");",
							"        pm.expect(company.title).to.be.a(\"string\");",
							"        const compAddr = company.address;",
							"        pm.expect(compAddr.address).to.be.a(\"string\");",
							"        pm.expect(compAddr.city).to.be.a(\"string\");",
							"        pm.expect(compAddr.state).to.be.a(\"string\");",
							"        pm.expect(compAddr.stateCode).to.be.a(\"string\");",
							"        pm.expect(compAddr.postalCode).to.be.a(\"string\");",
							"        pm.expect(compAddr.coordinates.lat).to.be.a(\"number\");",
							"        pm.expect(compAddr.coordinates.lng).to.be.a(\"number\");",
							"",
							"        // Nested crypto fields",
							"        const crypto = user.crypto;",
							"        pm.expect(crypto.coin).to.be.a(\"string\");",
							"        pm.expect(crypto.wallet).to.be.a(\"string\");",
							"        pm.expect(crypto.network).to.be.a(\"string\");",
							"    });",
							"});",
							"",
							"// --------------------------------------",
							"// 🚫 FIELD VALUES ARE NOT NULL/UNDEFINED",
							"// --------------------------------------",
							"",
							"pm.test(\"All required user fields are not null or undefined\", () => {",
							"    const topLevelFields = [",
							"        \"firstName\", \"lastName\", \"maidenName\", \"gender\", \"email\", \"phone\",",
							"        \"username\", \"password\", \"birthDate\", \"image\", \"bloodGroup\", \"ip\",",
							"        \"macAddress\", \"university\", \"ein\", \"ssn\", \"userAgent\", \"role\"",
							"    ];",
							"",
							"    users.forEach((user, index) => {",
							"        // Top-level fields",
							"        topLevelFields.forEach(field => {",
							"            pm.expect(",
							"                user[field],",
							"                `User ${index + 1} → \"${field}\" should not be null or undefined`",
							"            ).to.not.be.oneOf([null, undefined]);",
							"        });",
							"",
							"        // Nested hair fields",
							"        pm.expect(user.hair.color, `User ${index + 1} → hair.color is missing`).to.not.be.oneOf([null, undefined]);",
							"        pm.expect(user.hair.type, `User ${index + 1} → hair.type is missing`).to.not.be.oneOf([null, undefined]);",
							"",
							"        // Nested address fields",
							"        const addr = user.address;",
							"        pm.expect(addr.address, `User ${index + 1} → address.address is missing`).to.not.be.oneOf([null, undefined]);",
							"        pm.expect(addr.city, `User ${index + 1} → address.city is missing`).to.not.be.oneOf([null, undefined]);",
							"        pm.expect(addr.state, `User ${index + 1} → address.state is missing`).to.not.be.oneOf([null, undefined]);",
							"        pm.expect(addr.stateCode, `User ${index + 1} → address.stateCode is missing`).to.not.be.oneOf([null, undefined]);",
							"        pm.expect(addr.postalCode, `User ${index + 1} → address.postalCode is missing`).to.not.be.oneOf([null, undefined]);",
							"        pm.expect(addr.country, `User ${index + 1} → address.country is missing`).to.not.be.oneOf([null, undefined]);",
							"",
							"        // Nested address.coordinates fields",
							"        const coords = addr.coordinates;",
							"        pm.expect(coords.lat, `User ${index + 1} → coordinates.lat is missing`).to.not.be.oneOf([null, undefined]);",
							"        pm.expect(coords.lng, `User ${index + 1} → coordinates.lng is missing`).to.not.be.oneOf([null, undefined]);",
							"",
							"        // Nested bank fields",
							"        const bank = user.bank;",
							"        pm.expect(bank.cardExpire, `User ${index + 1} → bank.cardExpire is missing`).to.not.be.oneOf([null, undefined]);",
							"        pm.expect(bank.cardNumber, `User ${index + 1} → bank.cardNumber is missing`).to.not.be.oneOf([null, undefined]);",
							"        pm.expect(bank.cardType, `User ${index + 1} → bank.cardType is missing`).to.not.be.oneOf([null, undefined]);",
							"        pm.expect(bank.currency, `User ${index + 1} → bank.currency is missing`).to.not.be.oneOf([null, undefined]);",
							"        pm.expect(bank.iban, `User ${index + 1} → bank.iban is missing`).to.not.be.oneOf([null, undefined]);",
							"",
							"        // Nested company fields",
							"        const company = user.company;",
							"        pm.expect(company.name, `User ${index + 1} → company.name is missing`).to.not.be.oneOf([null, undefined]);",
							"        pm.expect(company.department, `User ${index + 1} → company.department is missing`).to.not.be.oneOf([null, undefined]);",
							"        pm.expect(company.title, `User ${index + 1} → company.title is missing`).to.not.be.oneOf([null, undefined]);",
							"",
							"        // Nested company.address fields",
							"        const compAddr = company.address;",
							"        pm.expect(compAddr.address, `User ${index + 1} → company.address.address is missing`).to.not.be.oneOf([null, undefined]);",
							"        pm.expect(compAddr.city, `User ${index + 1} → company.address.city is missing`).to.not.be.oneOf([null, undefined]);",
							"        pm.expect(compAddr.state, `User ${index + 1} → company.address.state is missing`).to.not.be.oneOf([null, undefined]);",
							"        pm.expect(compAddr.stateCode, `User ${index + 1} → company.address.stateCode is missing`).to.not.be.oneOf([null, undefined]);",
							"        pm.expect(compAddr.postalCode, `User ${index + 1} → company.address.postalCode is missing`).to.not.be.oneOf([null, undefined]);",
							"",
							"        // Nested company.address.coordinates fields",
							"        const compCoords = compAddr.coordinates;",
							"        pm.expect(compCoords.lat, `User ${index + 1} → company.coordinates.lat is missing`).to.not.be.oneOf([null, undefined]);",
							"        pm.expect(compCoords.lng, `User ${index + 1} → company.coordinates.lng is missing`).to.not.be.oneOf([null, undefined]);",
							"",
							"        // Nested crypto fields",
							"        const crypto = user.crypto;",
							"        pm.expect(crypto.coin, `User ${index + 1} → crypto.coin is missing`).to.not.be.oneOf([null, undefined]);",
							"        pm.expect(crypto.wallet, `User ${index + 1} → crypto.wallet is missing`).to.not.be.oneOf([null, undefined]);",
							"        pm.expect(crypto.network, `User ${index + 1} → crypto.network is missing`).to.not.be.oneOf([null, undefined]);",
							"    });",
							"});",
							"",
							"// 🔁 --------- UNIQUE VALUE TESTS ---------",
							"",
							"pm.test(\"Each user ID is unique\", () => {",
							"    const ids = users.map(user => user.id);",
							"    const uniqueIDs = new Set(ids);",
							"    pm.expect(uniqueIDs.size, \"Users IDs should be unique\").to.eql(ids.length);",
							"});",
							"",
							"// 📜 --------- SCHEMA VALIDATION ---------",
							"",
							"const schema = {",
							"  type: \"object\",",
							"  items: {",
							"    type: \"array\",",
							"    properties: {",
							"      id: { type: \"number\" },",
							"      firstName: { type: \"string\" },",
							"      lastName: { type: \"string\" },",
							"      maidenName: { type: \"string\" },",
							"      age: { type: \"number\" },",
							"      gender: { type: \"string\" },",
							"      email: { type: \"string\" },",
							"      phone: { type: \"string\" },",
							"      username: { type: \"string\" },",
							"      password: { type: \"string\" },",
							"      birthDate: { type: \"string\" },",
							"      image: { type: \"string\" },",
							"      bloodGroup: { type: \"string\" },",
							"      height: { type: \"number\" },",
							"      weight: { type: \"number\" },",
							"      eyeColor: { type: \"string\" },",
							"      hair: {",
							"        type: \"object\",",
							"        properties: {",
							"          color: { type: \"string\" },",
							"          type: { type: \"string\" }",
							"        },",
							"        required: [\"color\", \"type\"]",
							"      },",
							"      ip: { type: \"string\" },",
							"      address: {",
							"        type: \"object\",",
							"        properties: {",
							"          address: { type: \"string\" },",
							"          city: { type: \"string\" },",
							"          state: { type: \"string\" },",
							"          stateCode: { type: \"string\" },",
							"          postalCode: { type: \"string\" },",
							"          coordinates: {",
							"            type: \"object\",",
							"            properties: {",
							"              lat: { type: \"number\" },",
							"              lng: { type: \"number\" }",
							"            },",
							"            required: [\"lat\", \"lng\"]",
							"          },",
							"          country: { type: \"string\" }",
							"        },",
							"        required: [",
							"          \"address\",",
							"          \"city\",",
							"          \"state\",",
							"          \"stateCode\",",
							"          \"postalCode\",",
							"          \"coordinates\",",
							"          \"country\"",
							"        ]",
							"      },",
							"      macAddress: { type: \"string\" },",
							"      university: { type: \"string\" },",
							"      bank: {",
							"        type: \"object\",",
							"        properties: {",
							"          cardExpire: { type: \"string\" },",
							"          cardNumber: { type: \"string\" },",
							"          cardType: { type: \"string\" },",
							"          currency: { type: \"string\" },",
							"          iban: { type: \"string\" }",
							"        },",
							"        required: [\"cardExpire\", \"cardNumber\", \"cardType\", \"currency\", \"iban\"]",
							"      },",
							"      company: {",
							"        type: \"object\",",
							"        properties: {",
							"          department: { type: \"string\" },",
							"          name: { type: \"string\" },",
							"          title: { type: \"string\" },",
							"          address: {",
							"            type: \"object\",",
							"            properties: {",
							"              address: { type: \"string\" },",
							"              city: { type: \"string\" },",
							"              state: { type: \"string\" },",
							"              stateCode: { type: \"string\" },",
							"              postalCode: { type: \"string\" },",
							"              coordinates: {",
							"                type: \"object\",",
							"                properties: {",
							"                  lat: { type: \"number\" },",
							"                  lng: { type: \"number\" }",
							"                },",
							"                required: [\"lat\", \"lng\"]",
							"              },",
							"              country: { type: \"string\" }",
							"            },",
							"            required: [",
							"              \"address\",",
							"              \"city\",",
							"              \"state\",",
							"              \"stateCode\",",
							"              \"postalCode\",",
							"              \"coordinates\",",
							"              \"country\"",
							"            ]",
							"          }",
							"        },",
							"        required: [\"department\", \"name\", \"title\", \"address\"]",
							"      },",
							"      ein: { type: \"string\" },",
							"      ssn: { type: \"string\" },",
							"      userAgent: { type: \"string\" },",
							"      crypto: {",
							"        type: \"object\",",
							"        properties: {",
							"          coin: { type: \"string\" },",
							"          wallet: { type: \"string\" },",
							"          network: { type: \"string\" }",
							"        },",
							"        required: [\"coin\", \"wallet\", \"network\"]",
							"      },",
							"      role: { type: \"string\" }",
							"    },",
							"    required: [",
							"      \"id\",",
							"      \"firstName\",",
							"      \"lastName\",",
							"      \"maidenName\",",
							"      \"age\",",
							"      \"gender\",",
							"      \"email\",",
							"      \"phone\",",
							"      \"username\",",
							"      \"password\",",
							"      \"birthDate\",",
							"      \"image\",",
							"      \"bloodGroup\",",
							"      \"height\",",
							"      \"weight\",",
							"      \"eyeColor\",",
							"      \"hair\",",
							"      \"ip\",",
							"      \"address\",",
							"      \"macAddress\",",
							"      \"university\",",
							"      \"bank\",",
							"      \"company\",",
							"      \"ein\",",
							"      \"ssn\",",
							"      \"userAgent\",",
							"      \"crypto\",",
							"      \"role\"",
							"    ]",
							"  }",
							"};",
							"",
							"pm.test(\"Schema is valid ✅\", () => {",
							"    pm.response.to.have.jsonSchema(schema);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://dummyjson.com/users",
					"protocol": "https",
					"host": [
						"dummyjson",
						"com"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Single User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// --------------------",
							"// ✅ STATUS & PERFORMANCE TESTS",
							"// --------------------",
							"",
							"pm.test(\"Status code is 200\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is under 500ms\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"// --------------------",
							"// 📦 PARSE RESPONSE",
							"// --------------------",
							"",
							"const user = pm.response.json();",
							"",
							"// --------------------",
							"// 🏗️ STRUCTURE TESTS",
							"// --------------------",
							"",
							"pm.test(\"User is an object\", () => {",
							"    pm.expect(user).to.be.an(\"object\");",
							"});",
							"",
							"pm.test(\"User contains all required fields\", () => {",
							"    const requiredFields = [",
							"        \"id\", \"firstName\", \"lastName\", \"maidenName\", \"age\", \"gender\", \"email\", \"phone\", \"username\", \"password\",",
							"        \"birthDate\", \"image\", \"bloodGroup\", \"height\", \"weight\", \"eyeColor\", \"hair\", \"ip\", \"address\", \"macAddress\",",
							"        \"university\", \"bank\", \"company\", \"ein\", \"ssn\", \"userAgent\", \"crypto\", \"role\"",
							"    ];",
							"",
							"    requiredFields.forEach(field => {",
							"        pm.expect(user, `Missing field: ${field}`).to.have.property(field);",
							"    });",
							"",
							"    pm.expect(user.hair).to.have.all.keys(\"color\", \"type\");",
							"    pm.expect(user.address.coordinates).to.have.all.keys(\"lat\", \"lng\");",
							"    pm.expect(user.bank).to.include.all.keys(\"cardExpire\", \"cardNumber\", \"cardType\", \"currency\", \"iban\");",
							"    pm.expect(user.company).to.include.all.keys(\"department\", \"name\", \"title\", \"address\");",
							"    pm.expect(user.company.address.coordinates).to.have.all.keys(\"lat\", \"lng\");",
							"    pm.expect(user.crypto).to.include.all.keys(\"coin\", \"wallet\", \"network\");",
							"});",
							"",
							"// --------------------",
							"// 🔍 DATA TYPE VALIDATION",
							"// --------------------",
							"",
							"pm.test(\"Each user field has correct data type 🧩\", () => {",
							"    const fieldTypes = [",
							"        { field: \"id\", type: \"number\" },",
							"        { field: \"firstName\", type: \"string\" },",
							"        { field: \"lastName\", type: \"string\" },",
							"        { field: \"maidenName\", type: \"string\" },",
							"        { field: \"age\", type: \"number\" },",
							"        { field: \"gender\", type: \"string\" },",
							"        { field: \"email\", type: \"string\" },",
							"        { field: \"phone\", type: \"string\" },",
							"        { field: \"username\", type: \"string\" },",
							"        { field: \"password\", type: \"string\" },",
							"        { field: \"birthDate\", type: \"string\" },",
							"        { field: \"image\", type: \"string\" },",
							"        { field: \"bloodGroup\", type: \"string\" },",
							"        { field: \"height\", type: \"number\" },",
							"        { field: \"weight\", type: \"number\" },",
							"        { field: \"eyeColor\", type: \"string\" },",
							"        { field: \"ip\", type: \"string\" },",
							"        { field: \"macAddress\", type: \"string\" },",
							"        { field: \"university\", type: \"string\" },",
							"        { field: \"ein\", type: \"string\" },",
							"        { field: \"ssn\", type: \"string\" },",
							"        { field: \"userAgent\", type: \"string\" },",
							"        { field: \"role\", type: \"string\" }",
							"    ];",
							"",
							"    fieldTypes.forEach(({ field, type }) => {",
							"        pm.expect(user[field], `${field} should be a ${type}`).to.be.a(type);",
							"    });",
							"",
							"    // Nested fields",
							"    pm.expect(user.hair.color).to.be.a(\"string\");",
							"    pm.expect(user.hair.type).to.be.a(\"string\");",
							"",
							"    const addr = user.address;",
							"    pm.expect(addr.address).to.be.a(\"string\");",
							"    pm.expect(addr.city).to.be.a(\"string\");",
							"    pm.expect(addr.state).to.be.a(\"string\");",
							"    pm.expect(addr.stateCode).to.be.a(\"string\");",
							"    pm.expect(addr.postalCode).to.be.a(\"string\");",
							"    pm.expect(addr.coordinates.lat).to.be.a(\"number\");",
							"    pm.expect(addr.coordinates.lng).to.be.a(\"number\");",
							"",
							"    const bank = user.bank;",
							"    pm.expect(bank.cardExpire).to.be.a(\"string\");",
							"    pm.expect(bank.cardNumber).to.be.a(\"string\");",
							"    pm.expect(bank.cardType).to.be.a(\"string\");",
							"    pm.expect(bank.currency).to.be.a(\"string\");",
							"    pm.expect(bank.iban).to.be.a(\"string\");",
							"",
							"    const company = user.company;",
							"    pm.expect(company.name).to.be.a(\"string\");",
							"    pm.expect(company.department).to.be.a(\"string\");",
							"    pm.expect(company.title).to.be.a(\"string\");",
							"    pm.expect(company.address.address).to.be.a(\"string\");",
							"    pm.expect(company.address.city).to.be.a(\"string\");",
							"    pm.expect(company.address.state).to.be.a(\"string\");",
							"    pm.expect(company.address.stateCode).to.be.a(\"string\");",
							"    pm.expect(company.address.postalCode).to.be.a(\"string\");",
							"    pm.expect(company.address.coordinates.lat).to.be.a(\"number\");",
							"    pm.expect(company.address.coordinates.lng).to.be.a(\"number\");",
							"",
							"    const crypto = user.crypto;",
							"    pm.expect(crypto.coin).to.be.a(\"string\");",
							"    pm.expect(crypto.wallet).to.be.a(\"string\");",
							"    pm.expect(crypto.network).to.be.a(\"string\");",
							"});",
							"",
							"// --------------------------------------",
							"// 🚫 FIELD VALUES ARE NOT NULL/UNDEFINED",
							"// --------------------------------------",
							"",
							"pm.test(\"All required user fields are not null or undefined\", () => {",
							"    const nonNullableFields = [",
							"        \"firstName\", \"lastName\", \"maidenName\", \"gender\", \"email\", \"phone\", \"username\", \"password\",",
							"        \"birthDate\", \"image\", \"bloodGroup\", \"ip\", \"macAddress\", \"university\", \"ein\", \"ssn\", \"userAgent\", \"role\"",
							"    ];",
							"",
							"    nonNullableFields.forEach(field => {",
							"        pm.expect(user[field], `${field} should not be null or undefined`).to.not.be.oneOf([null, undefined]);",
							"    });",
							"",
							"    // Nested checks",
							"    pm.expect(user.hair.color).to.not.be.oneOf([null, undefined]);",
							"    pm.expect(user.hair.type).to.not.be.oneOf([null, undefined]);",
							"",
							"    const addr = user.address;",
							"    [\"address\", \"city\", \"state\", \"stateCode\", \"postalCode\", \"country\"].forEach(field => {",
							"        pm.expect(addr[field], `address.${field} is missing`).to.not.be.oneOf([null, undefined]);",
							"    });",
							"    pm.expect(addr.coordinates.lat).to.not.be.oneOf([null, undefined]);",
							"    pm.expect(addr.coordinates.lng).to.not.be.oneOf([null, undefined]);",
							"",
							"    const bank = user.bank;",
							"    [\"cardExpire\", \"cardNumber\", \"cardType\", \"currency\", \"iban\"].forEach(field => {",
							"        pm.expect(bank[field], `bank.${field} is missing`).to.not.be.oneOf([null, undefined]);",
							"    });",
							"",
							"    const company = user.company;",
							"    [\"name\", \"department\", \"title\"].forEach(field => {",
							"        pm.expect(company[field], `company.${field} is missing`).to.not.be.oneOf([null, undefined]);",
							"    });",
							"",
							"    const compAddr = company.address;",
							"    [\"address\", \"city\", \"state\", \"stateCode\", \"postalCode\"].forEach(field => {",
							"        pm.expect(compAddr[field], `company.address.${field} is missing`).to.not.be.oneOf([null, undefined]);",
							"    });",
							"    pm.expect(compAddr.coordinates.lat).to.not.be.oneOf([null, undefined]);",
							"    pm.expect(compAddr.coordinates.lng).to.not.be.oneOf([null, undefined]);",
							"",
							"    const crypto = user.crypto;",
							"    [\"coin\", \"wallet\", \"network\"].forEach(field => {",
							"        pm.expect(crypto[field], `crypto.${field} is missing`).to.not.be.oneOf([null, undefined]);",
							"    });",
							"});",
							"",
							"// --------------------------------",
							"// 🔁 MATCH USER ID WITH REQUEST ID",
							"// --------------------------------",
							"",
							"pm.test(\"User ID matches request ID\", () => {",
							"    const urlPath = [...pm.request.url.path];",
							"    const requestUserID = Number(urlPath.pop());",
							"    pm.expect(user.id).to.eql(requestUserID);",
							"});",
							"",
							"// 📜 --------- SCHEMA VALIDATION ---------",
							"",
							"const schema = {",
							"  type: \"object\",",
							"  items: {",
							"    type: \"array\",",
							"    properties: {",
							"      id: { type: \"number\" },",
							"      firstName: { type: \"string\" },",
							"      lastName: { type: \"string\" },",
							"      maidenName: { type: \"string\" },",
							"      age: { type: \"number\" },",
							"      gender: { type: \"string\" },",
							"      email: { type: \"string\" },",
							"      phone: { type: \"string\" },",
							"      username: { type: \"string\" },",
							"      password: { type: \"string\" },",
							"      birthDate: { type: \"string\" },",
							"      image: { type: \"string\" },",
							"      bloodGroup: { type: \"string\" },",
							"      height: { type: \"number\" },",
							"      weight: { type: \"number\" },",
							"      eyeColor: { type: \"string\" },",
							"      hair: {",
							"        type: \"object\",",
							"        properties: {",
							"          color: { type: \"string\" },",
							"          type: { type: \"string\" }",
							"        },",
							"        required: [\"color\", \"type\"]",
							"      },",
							"      ip: { type: \"string\" },",
							"      address: {",
							"        type: \"object\",",
							"        properties: {",
							"          address: { type: \"string\" },",
							"          city: { type: \"string\" },",
							"          state: { type: \"string\" },",
							"          stateCode: { type: \"string\" },",
							"          postalCode: { type: \"string\" },",
							"          coordinates: {",
							"            type: \"object\",",
							"            properties: {",
							"              lat: { type: \"number\" },",
							"              lng: { type: \"number\" }",
							"            },",
							"            required: [\"lat\", \"lng\"]",
							"          },",
							"          country: { type: \"string\" }",
							"        },",
							"        required: [",
							"          \"address\",",
							"          \"city\",",
							"          \"state\",",
							"          \"stateCode\",",
							"          \"postalCode\",",
							"          \"coordinates\",",
							"          \"country\"",
							"        ]",
							"      },",
							"      macAddress: { type: \"string\" },",
							"      university: { type: \"string\" },",
							"      bank: {",
							"        type: \"object\",",
							"        properties: {",
							"          cardExpire: { type: \"string\" },",
							"          cardNumber: { type: \"string\" },",
							"          cardType: { type: \"string\" },",
							"          currency: { type: \"string\" },",
							"          iban: { type: \"string\" }",
							"        },",
							"        required: [\"cardExpire\", \"cardNumber\", \"cardType\", \"currency\", \"iban\"]",
							"      },",
							"      company: {",
							"        type: \"object\",",
							"        properties: {",
							"          department: { type: \"string\" },",
							"          name: { type: \"string\" },",
							"          title: { type: \"string\" },",
							"          address: {",
							"            type: \"object\",",
							"            properties: {",
							"              address: { type: \"string\" },",
							"              city: { type: \"string\" },",
							"              state: { type: \"string\" },",
							"              stateCode: { type: \"string\" },",
							"              postalCode: { type: \"string\" },",
							"              coordinates: {",
							"                type: \"object\",",
							"                properties: {",
							"                  lat: { type: \"number\" },",
							"                  lng: { type: \"number\" }",
							"                },",
							"                required: [\"lat\", \"lng\"]",
							"              },",
							"              country: { type: \"string\" }",
							"            },",
							"            required: [",
							"              \"address\",",
							"              \"city\",",
							"              \"state\",",
							"              \"stateCode\",",
							"              \"postalCode\",",
							"              \"coordinates\",",
							"              \"country\"",
							"            ]",
							"          }",
							"        },",
							"        required: [\"department\", \"name\", \"title\", \"address\"]",
							"      },",
							"      ein: { type: \"string\" },",
							"      ssn: { type: \"string\" },",
							"      userAgent: { type: \"string\" },",
							"      crypto: {",
							"        type: \"object\",",
							"        properties: {",
							"          coin: { type: \"string\" },",
							"          wallet: { type: \"string\" },",
							"          network: { type: \"string\" }",
							"        },",
							"        required: [\"coin\", \"wallet\", \"network\"]",
							"      },",
							"      role: { type: \"string\" }",
							"    },",
							"    required: [",
							"      \"id\",",
							"      \"firstName\",",
							"      \"lastName\",",
							"      \"maidenName\",",
							"      \"age\",",
							"      \"gender\",",
							"      \"email\",",
							"      \"phone\",",
							"      \"username\",",
							"      \"password\",",
							"      \"birthDate\",",
							"      \"image\",",
							"      \"bloodGroup\",",
							"      \"height\",",
							"      \"weight\",",
							"      \"eyeColor\",",
							"      \"hair\",",
							"      \"ip\",",
							"      \"address\",",
							"      \"macAddress\",",
							"      \"university\",",
							"      \"bank\",",
							"      \"company\",",
							"      \"ein\",",
							"      \"ssn\",",
							"      \"userAgent\",",
							"      \"crypto\",",
							"      \"role\"",
							"    ]",
							"  }",
							"};",
							"",
							"pm.test(\"Schema is valid ✅\", () => {",
							"    pm.response.to.have.jsonSchema(schema);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://dummyjson.com/users/1",
					"protocol": "https",
					"host": [
						"dummyjson",
						"com"
					],
					"path": [
						"users",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// --------------------",
							"// ✅ STATUS & PERFORMANCE TESTS",
							"// --------------------",
							"",
							"pm.test(\"Response code is 201\", () => {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response time is under 500ms\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"// --------------------",
							"// 📦 PARSE RESPONSE",
							"// --------------------",
							"",
							"const user = pm.response.json();",
							"",
							"// --------------------",
							"// 🏗️ STRUCTURE TESTS",
							"// --------------------",
							"",
							"pm.test(\"Response is an object\", () => {",
							"    pm.expect(user).to.be.an(\"object\");",
							"});",
							"",
							"pm.test(\"User contains all required fields\", () => {",
							"    const requiredFields = [",
							"        \"id\", \"firstName\", \"lastName\", \"maidenName\", \"age\", \"gender\", \"email\", \"phone\", \"username\", \"password\",",
							"        \"birthDate\", \"image\", \"bloodGroup\", \"height\", \"weight\", \"eyeColor\", \"hair\", \"ip\", \"address\", \"macAddress\",",
							"        \"university\", \"bank\", \"company\", \"ein\", \"ssn\", \"userAgent\"",
							"    ];",
							"",
							"    requiredFields.forEach(field => {",
							"        pm.expect(user, `Missing field: ${field}`).to.have.property(field);",
							"    });",
							"",
							"    pm.expect(user.hair).to.have.all.keys(\"color\", \"type\");",
							"    pm.expect(user.address.coordinates).to.have.all.keys(\"lat\", \"lng\");",
							"    pm.expect(user.bank).to.include.all.keys(\"cardExpire\", \"cardNumber\", \"cardType\", \"currency\", \"iban\");",
							"    pm.expect(user.company).to.include.all.keys(\"department\", \"name\", \"title\", \"address\");",
							"    pm.expect(user.company.address.coordinates).to.have.all.keys(\"lat\", \"lng\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"firstName\": \"Liam\",\n  \"lastName\": \"Turner\",\n  \"maidenName\": \"Davis\",\n  \"age\": 34,\n  \"gender\": \"male\",\n  \"email\": \"liam.turner@samplemail.com\",\n  \"phone\": \"+1 320-555-8291\",\n  \"username\": \"liamturner34\",\n  \"password\": \"secureLiam2025!\",\n  \"birthDate\": \"1991-11-14\",\n  \"image\": \"https://dummyjson.com/icon/liamturner/128\",\n  \"bloodGroup\": \"A+\",\n  \"height\": 181.7,\n  \"weight\": 77.3,\n  \"eyeColor\": \"Hazel\",\n  \"hair\": {\n    \"color\": \"Black\",\n    \"type\": \"Straight\"\n  },\n  \"ip\": \"103.28.47.95\",\n  \"address\": {\n    \"address\": \"842 Elmwood Avenue\",\n    \"city\": \"Denver\",\n    \"state\": \"Colorado\",\n    \"stateCode\": \"CO\",\n    \"postalCode\": \"80220\",\n    \"coordinates\": {\n      \"lat\": 39.7392,\n      \"lng\": -104.9903\n    },\n    \"country\": \"United States\"\n  },\n  \"macAddress\": \"ae:4b:93:6c:72:11\",\n  \"university\": \"University of Colorado Boulder\",\n  \"bank\": {\n    \"cardExpire\": \"09/28\",\n    \"cardNumber\": \"4519230048591123\",\n    \"cardType\": \"Visa\",\n    \"currency\": \"USD\",\n    \"iban\": \"US23BOFA12345678901234\"\n  },\n  \"company\": {\n    \"department\": \"Product\",\n    \"name\": \"Baxter, Hill & Stone\",\n    \"title\": \"Product Designer\",\n    \"address\": {\n      \"address\": \"4907 Park Lane\",\n      \"city\": \"Seattle\",\n      \"state\": \"Washington\",\n      \"stateCode\": \"WA\",\n      \"postalCode\": \"98101\",\n      \"coordinates\": {\n        \"lat\": 47.6062,\n        \"lng\": -122.3321\n      },\n      \"country\": \"United States\"\n    }\n  },\n  \"ein\": \"74-2938491\",\n  \"ssn\": \"439-82-1049\",\n  \"userAgent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36\",\n  \"crypto\": {\n    \"coin\": \"Ethereum\",\n    \"wallet\": \"0x3a4f71c6e8c9b1e847e8a772ce9d29f5b36fef21\",\n    \"network\": \"Polygon\"\n  },\n  \"role\": \"user\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://dummyjson.com/users/add",
					"protocol": "https",
					"host": [
						"dummyjson",
						"com"
					],
					"path": [
						"users",
						"add"
					]
				}
			},
			"response": []
		}
	]
}