{
	"info": {
		"_postman_id": "cc09c605-9cb3-41cd-9853-3792575f6813",
		"name": "Restful-Booker",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17644856"
	},
	"item": [
		{
			"name": "Auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// üì¶ Parse response and set token",
							"const jsonData = pm.response.json();",
							"pm.environment.set(\"token\", jsonData.token);",
							"",
							"",
							"// ‚úÖüü¢ STATUS & PERFORMANCE TESTS",
							"pm.test(\"‚úÖ Status code is 200 (Auth Successful)\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// üîêüì• TOKEN VALIDATION TESTS",
							"pm.test(\"üì• Token is returned and valid\", () => {",
							"    pm.expect(jsonData.token).to.be.a(\"string\");",
							"    pm.expect(jsonData.token, \"Token should not be null\").to.not.be.null;",
							"});",
							"",
							"// üîê‚ùå AUTH TEST ‚Äì Invalid credentials should return 'Bad credentials'",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"baseUrl\")+\"/auth\",",
							"    method: \"POST\",",
							"    header: {",
							"        \"Content-Type\": \"application/json\",",
							"    },",
							"    body: {",
							"        mode: \"raw\",",
							"        raw: JSON.stringify({",
							"            username: \"testuser\",",
							"            password: \"testpass\"",
							"        })",
							"    }",
							"}, (err, res) => {",
							"    pm.test(\"üîê Missing token on POST request with invalid credentials üîë ‚û°Ô∏è 200 and 'Bad credentials' üîç\", () => {",
							"        pm.expect(res.code).to.eql(200);",
							"        const jsonData = res.json();",
							"        pm.expect(jsonData).to.have.property(\"reason\");",
							"        pm.expect(jsonData.reason).to.eql(\"Bad credentials\");",
							"    })",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\" : \"admin\",\n    \"password\" : \"password123\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/auth",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// üì¶ Parse response and set environment variable",
							"const bookingData = pm.response.json();",
							"",
							"pm.environment.set(\"bookingId\", bookingData.bookingid);",
							"pm.environment.set(\"firstName\", bookingData.booking.firstname);",
							"pm.environment.set(\"lastName\", bookingData.booking.lastname);",
							"pm.environment.set(\"totalPrice\", bookingData.booking.totalprice);",
							"pm.environment.set(\"depositPaid\", bookingData.booking.depositpaid);",
							"pm.environment.set(\"checkIn\", bookingData.booking.bookingdates.checkin);",
							"pm.environment.set(\"checkOut\", bookingData.booking.bookingdates.checkout);",
							"pm.environment.set(\"addNeeds\", bookingData.booking.additionalneeds);",
							"",
							"// üß© Define expected fields",
							"const outerFields = [\"bookingid\", \"booking\"];",
							"const bookingFields = [\"firstname\", \"lastname\", \"totalprice\", \"depositpaid\", \"bookingdates\", \"additionalneeds\"];",
							"const bookingDatesFields = [\"checkin\", \"checkout\"];",
							"",
							"const bookingFieldsDataTypes = [",
							"    { field: \"firstname\", type: \"string\" },",
							"    { field: \"lastname\", type: \"string\" },",
							"    { field: \"totalprice\", type: \"number\" },",
							"    { field: \"depositpaid\", type: \"boolean\" },",
							"    { field: \"additionalneeds\", type: \"string\"}",
							"];",
							"",
							"const bookingDatesDataTypes = [",
							"    { field: \"checkin\", type: \"string\" },",
							"    { field: \"checkout\", type: \"string\" },",
							"];",
							"",
							"",
							"// ‚úÖüü¢ STATUS & PERFORMANCE TESTS",
							"pm.test(\"‚úÖ Status code is 200\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"‚è±Ô∏è Response time is under 500ms\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"// ‚úÖüì¶ STRUCTURE TEST",
							"pm.test(\"üì¶ Response is an object\", () => {",
							"    pm.expect(bookingData).to.be.an(\"object\");",
							"});",
							"",
							"",
							"// ‚ùåüö´ NULL / UNDEFINED FIELD CHECKS",
							"pm.test(\"üö´ Response fields are not null or undefined\", () => {",
							"    outerFields.forEach((field) => {",
							"        pm.expect(bookingData[field], `Field ${field} is null or undefined`).to.not.be.oneOf([null, undefined]);",
							"    });",
							"    bookingFields.forEach((field) => {",
							"        pm.expect(bookingData.booking[field], `Field ${field} is null or undefined`).to.not.be.oneOf([null, undefined]);",
							"    });",
							"    bookingDatesFields.forEach((field) => {",
							"        pm.expect(bookingData.booking.bookingdates[field], `Field ${field} is null or undefined`).to.not.be.oneOf([null, undefined]);",
							"    });",
							"});",
							"",
							"",
							"// ‚úÖüîç FIELD PRESENCE TESTS",
							"pm.test(\"üîç Response contains all expected fields\", () => {",
							"    outerFields.forEach((field => {",
							"        pm.expect(bookingData, `Missing field ${field}`).to.have.property(field);",
							"    }));",
							"    bookingFields.forEach((field => {",
							"        pm.expect(bookingData.booking, `Missing field ${field}`).to.have.property(field);",
							"    }));",
							"    bookingDatesFields.forEach((field => {",
							"        pm.expect(bookingData.booking.bookingdates).to.have.property(field);",
							"    }));",
							"});",
							"",
							"",
							"// ‚úÖüìê DATA TYPE VALIDATION",
							"pm.test(\"üìê Response fields contain correct data types\", () => {",
							"    pm.expect(bookingData.bookingid).to.be.a(\"number\");",
							"",
							"    bookingFieldsDataTypes.forEach(({field, type}) => {",
							"        pm.expect(bookingData.booking[field]).to.be.a(type);",
							"    });",
							"",
							"    bookingDatesDataTypes.forEach(({field, type}) => {",
							"        pm.expect(bookingData.booking.bookingdates[field]).to.be.a(type);",
							"    });",
							"});",
							"",
							"",
							"// ‚úÖüßæ SCHEMA VALIDATION",
							"const schema = {",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
							"  \"type\": \"object\",",
							"  \"required\": [\"bookingid\", \"booking\"],",
							"  \"properties\": {",
							"    \"bookingid\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"booking\": {",
							"      \"type\": \"object\",",
							"      \"required\": [",
							"        \"firstname\",",
							"        \"lastname\",",
							"        \"totalprice\",",
							"        \"depositpaid\",",
							"        \"bookingdates\",",
							"        \"additionalneeds\"",
							"      ],",
							"      \"properties\": {",
							"        \"firstname\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"lastname\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"totalprice\": {",
							"          \"type\": \"number\"",
							"        },",
							"        \"depositpaid\": {",
							"          \"type\": \"boolean\"",
							"        },",
							"        \"bookingdates\": {",
							"          \"type\": \"object\",",
							"          \"required\": [\"checkin\", \"checkout\"],",
							"          \"properties\": {",
							"            \"checkin\": {",
							"              \"type\": \"string\",",
							"              \"format\": \"date\"",
							"            },",
							"            \"checkout\": {",
							"              \"type\": \"string\",",
							"              \"format\": \"date\"",
							"            }",
							"          }",
							"        },",
							"        \"additionalneeds\": {",
							"          \"type\": \"string\"",
							"        }",
							"      }",
							"    }",
							"  }",
							"};",
							"",
							"pm.test(\"üßæ Schema is valid for POST /booking\", () => {",
							"    pm.expect(bookingData).to.be.jsonSchema(schema);",
							"});",
							"",
							"// üö´ SEND POST REQUEST WITH MISSING ADDITIONAL NEEDS",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"baseUrl\")+\"/booking\",",
							"    method: \"POST\",",
							"    header: {",
							"        \"Content-Type\": \"application/json\"",
							"    },",
							"    body: {",
							"        mode: \"raw\",",
							"        raw: JSON.stringify({",
							"            \"firstname\": \"FirstNameQA\",",
							"            \"lastname\": \"LastNameQA\",",
							"            \"totalprice\": 123,",
							"            \"depositpaid\": true,",
							"            \"bookingdates\": {",
							"                \"checkin\": \"2025-01-01\",",
							"                \"checkout\": \"2025-01-15\"",
							"                },",
							"        })",
							"    }",
							"}, (err, res) => {",
							"    pm.test(\"üö´ POST with missing 'additionalneeds' (optional field) ‚û°Ô∏è 200 OK\", () => {",
							"        pm.expect(res.code).to.eql(200);",
							"    });",
							"});",
							"",
							"// ‚ö†Ô∏è SEND POST Request with 'totalprice' as STRING (should return 400 Bad Request but got 200 OK)",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"baseUrl\")+\"/booking\",",
							"    method: \"POST\",",
							"    header: {",
							"        \"Content-Type\": \"application/json\"",
							"    },",
							"    body: {",
							"        mode: \"raw\",",
							"        raw: JSON.stringify({",
							"            \"firstname\": \"FirstNameQA\",",
							"            \"lastname\": \"LastNameQA\",",
							"            \"totalprice\": \"123\",",
							"            \"depositpaid\": true,",
							"            \"bookingdates\": {",
							"                \"checkin\": \"2025-01-01\",",
							"                \"checkout\": \"2025-01-15\"",
							"                },",
							"            \"additionalneeds\": \"Breakfast\"",
							"        })",
							"    }",
							"}, (err, res) => {",
							"    pm.test(\"‚ùå Fails: API accepts invalid type for 'totalprice' ‚û°Ô∏è SHOULD return 400, but got 200 ‚ö†Ô∏è\", () => {",
							"        pm.expect(res.code).to.not.eql(200);",
							"    });",
							"});",
							"",
							"// ‚ö†Ô∏è SEND POST Request with 'depositpaid' as STRING (should return 400 Bad Request but got 200 OK)",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"baseUrl\")+\"/booking\",",
							"    method: \"POST\",",
							"    header:{",
							"        \"Content-Type\": \"application/json\"",
							"    },",
							"    body:{",
							"        mode:\"raw\",",
							"        raw: JSON.stringify({",
							"            \"firstname\": \"FirstNameQA\",",
							"            \"lastname\": \"LastNameQA\",",
							"            \"totalprice\": 123,",
							"            \"depositpaid\": \"true\",",
							"            \"bookingdates\": {",
							"                \"checkin\": \"2025-01-01\",",
							"                \"checkout\": \"2025-01-15\"",
							"                },",
							"            \"additionalneeds\": \"Breakfast\"",
							"        })",
							"    }",
							"}, (err, res) => {",
							"    pm.test(\"‚ùå Fails: API accepts invalid type for 'depositpaid' ‚û°Ô∏è SHOULD return 400, but got 200 ‚ö†Ô∏è\", () => {",
							"        pm.expect(res.code).to.not.eql(200);",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstname\": \"FirstNameQA\",\n    \"lastname\": \"LastNameQA\",\n    \"totalprice\": 123,\n    \"depositpaid\": true,\n    \"bookingdates\": {\n        \"checkin\": \"2025-01-01\",\n        \"checkout\": \"2025-01-15\"\n    },\n   \"additionalneeds\": \"I love API testing with Postman\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/booking",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// üì¶ Parse response and set environment variables",
							"const bookingData = pm.response.json();",
							"",
							"const firstName = pm.environment.get(\"firstName\");",
							"const lastName = pm.environment.get(\"lastName\");",
							"const totalPrice = pm.environment.get(\"totalPrice\");",
							"const depositPaid = pm.environment.get(\"depositPaid\");",
							"const checkIn = pm.environment.get(\"checkIn\");",
							"const checkOut = pm.environment.get(\"checkOut\");",
							"const addNeeds = pm.environment.get(\"addNeeds\");",
							"",
							"// üß© Define expected fields",
							"const bookingFields = [",
							"    \"firstname\", \"lastname\", \"totalprice\", ",
							"    \"depositpaid\", \"bookingdates\", \"additionalneeds\"",
							"];",
							"",
							"const bookingDatesFields = [\"checkin\", \"checkout\"];",
							"",
							"const bookingFieldsVariables = [",
							"    {field: \"firstname\", value: firstName},",
							"    {field: \"lastname\", value: lastName},",
							"    {field: \"totalprice\", value: totalPrice},",
							"    {field: \"depositpaid\", value: depositPaid},",
							"    {field: \"additionalneeds\", value: addNeeds}",
							"];",
							"",
							"const bookingDatesFieldsVariables = [",
							"    { field: \"checkin\", value: checkIn },",
							"    { field: \"checkout\", value: checkOut },",
							"];",
							"",
							"const bookingFieldsDataTypes = [",
							"    { field: \"firstname\", type: \"string\" },",
							"    { field: \"lastname\", type: \"string\" },",
							"    { field: \"totalprice\", type: \"number\" },",
							"    { field: \"depositpaid\", type: \"boolean\" },",
							"    { field: \"additionalneeds\", type: \"string\"}",
							"];",
							"",
							"const bookingDatesDataTypes = [",
							"    { field: \"checkin\", type: \"string\" },",
							"    { field: \"checkout\", type: \"string\" },",
							"];",
							"",
							"",
							"// ‚úÖüü¢ STATUS & PERFORMANCE TESTS",
							"pm.test(\"‚úÖ Status code is 200\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"‚è±Ô∏è Response time is under 500ms\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"// üì¶‚úÖ STRUCTURE TEST",
							"pm.test(\"üì¶ Response is an object\", () => {",
							"    pm.expect(bookingData).to.be.an(\"object\");",
							"});",
							"",
							"",
							"// üö´‚ùå NULL / UNDEFINED FIELD CHECKS",
							"pm.test(\"üö´ Response fields are not null or undefined\", () => {",
							"    bookingFields.forEach((field) => {",
							"        pm.expect(bookingData[field], `Field ${field} is null or undefined`).to.not.be.oneOf([null, undefined]);",
							"    });",
							"    bookingDatesFields.forEach((field) => {",
							"        pm.expect(bookingData.bookingdates[field], `Field ${field} is null or undefined`).to.not.be.oneOf([null, undefined]);",
							"    });",
							"});",
							"",
							"",
							"// üîç‚úÖ FIELD PRESENCE TESTS",
							"pm.test(\"üîç Response contains all expected fields\", () => {",
							"    bookingFields.forEach((field => {",
							"        pm.expect(bookingData, `Missing field ${field}`).to.have.property(field);",
							"    }));",
							"    bookingDatesFields.forEach((field => {",
							"        pm.expect(bookingData.bookingdates, `Missing field ${field} in bookingdates`).to.have.property(field);",
							"    }));",
							"});",
							"",
							"",
							"// üìê‚úÖ DATA TYPE VALIDATION",
							"pm.test(\"üìê Response fields contain correct data types\", () => {",
							"    bookingFieldsDataTypes.forEach(({field, type}) => {",
							"        pm.expect(bookingData[field], `Field ${field} is not of type ${field.type}`).to.be.a(type);",
							"    });",
							"    bookingDatesDataTypes.forEach(({field, type}) => {",
							"        pm.expect(bookingData.bookingdates[field]).to.be.a(type);",
							"    });",
							"});",
							"",
							"",
							"// üßæ‚úÖ SCHEMA VALIDATION",
							"const schema = {",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
							"  \"type\": \"object\",",
							"  \"required\": [",
							"    \"firstname\",",
							"    \"lastname\",",
							"    \"totalprice\",",
							"    \"depositpaid\",",
							"    \"bookingdates\",",
							"    \"additionalneeds\"",
							"  ],",
							"  \"properties\": {",
							"    \"firstname\": { \"type\": \"string\" },",
							"    \"lastname\": { \"type\": \"string\" },",
							"    \"totalprice\": { \"type\": \"number\" },",
							"    \"depositpaid\": { \"type\": \"boolean\" },",
							"    \"bookingdates\": {",
							"      \"type\": \"object\",",
							"      \"required\": [\"checkin\", \"checkout\"],",
							"      \"properties\": {",
							"        \"checkin\": { \"type\": \"string\", \"format\": \"date\" },",
							"        \"checkout\": { \"type\": \"string\", \"format\": \"date\" }",
							"      }",
							"    },",
							"    \"additionalneeds\": { \"type\": \"string\" }",
							"  }",
							"};",
							"",
							"pm.test(\"üßæ Schema is valid for GET /booking/:id\", () => {",
							"    pm.expect(bookingData).to.be.jsonSchema(schema);",
							"});",
							"",
							"",
							"// üîÅ‚úÖ POST vs GET VALUE MATCH TEST",
							"pm.test(\"üü∞ POST response matches GET response\", () => {",
							"    bookingFieldsVariables.forEach(({field, value}) => {",
							"    pm.expect(bookingData[field]).to.eql(value);",
							"",
							"    bookingDatesFieldsVariables.forEach(({field, value}) => {",
							"        pm.expect(bookingData.bookingdates[field]).to.eql(value)",
							"    })",
							"});",
							"});",
							"",
							"// ‚ö†Ô∏è SEND GET Request with invalid booking id",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"baseUrl\")+\"/booking/999999\",",
							"    method: \"GET\",",
							"    header: {",
							"        \"Content-Type\": \"application/json\"",
							"    }",
							"}, (err, res) => {",
							"    pm.test(\"‚ö†Ô∏è GET request with invalid booking id returns 404\", () => {",
							"        pm.expect(res.code).to.eql(404);",
							"    })",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/booking/{{bookingId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"booking",
						"{{bookingId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Bookings",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// üì¶ Parse response and set environment variables",
							"const bookingData = pm.response.json();",
							"",
							"// ‚úÖüü¢ STATUS & PERFORMANCE TESTS",
							"pm.test(\"‚úÖ Status code is 200\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"‚è±Ô∏è Response time is under 500ms\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"// üì¶‚úÖ STRUCTURE TEST",
							"pm.test(\"üì¶ Response is an array\", () => {",
							"    pm.expect(bookingData).to.be.an(\"array\");",
							"});",
							"",
							"// ‚úÖüî¢ VALIDATE CONTENT TYPE",
							"pm.test(\"üî¢ All booking entries are objects with bookingid (number)\", () => {",
							"    bookingData.forEach((data) => {",
							"        pm.expect(data).to.be.an(\"object\");",
							"        pm.expect(data).to.have.property(\"bookingid\");",
							"        pm.expect(data.bookingid).to.be.a(\"number\");",
							"    });",
							"});",
							"",
							"// üßæ‚úÖ SCHEMA VALIDATION",
							"",
							"const schema = {",
							"  type: \"array\",",
							"  items: {",
							"    type: \"object\",",
							"    required: [\"bookingid\"],",
							"    properties: {",
							"      bookingid: { type: \"integer\" }",
							"    }",
							"  }",
							"};",
							"",
							"pm.test(\"üßæ Schema is valid for GET /booking\", () => {",
							"    pm.expect(bookingData).to.be.jsonSchema(schema);",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/booking",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// üì¶ Parse response and set environment variables",
							"const bookingData = pm.response.json();",
							"",
							"const updatedFirstName = pm.environment.get(\"updatedFirstName\");",
							"const updatedLastName = pm.environment.get(\"updatedLastName\");",
							"const updatedTotalPrice = pm.environment.get(\"updatedTotalPrice\");",
							"const updatedDepositPaid = pm.environment.get(\"updatedDepositPaid\");",
							"const updatedCheckIn = pm.environment.get(\"updatedCheckIn\");",
							"const updatedCheckOut = pm.environment.get(\"updatedCheckOut\");",
							"const updatedAddNeeds = pm.environment.get(\"updatedAddNeeds\");",
							"",
							"// üß© Define expected fields",
							"",
							"const bookingFields = [",
							"    \"firstname\", \"lastname\", \"totalprice\", ",
							"    \"depositpaid\", \"bookingdates\", \"additionalneeds\"",
							"];",
							"",
							"const bookingDatesFields = [\"checkin\", \"checkout\"];",
							"",
							"// üìê Define expected field types",
							"",
							"const bookingFieldsDataTypes = [",
							"    { field: \"firstname\", type: \"string\" },",
							"    { field: \"lastname\", type: \"string\" },",
							"    { field: \"totalprice\", type: \"number\" },",
							"    { field: \"depositpaid\", type: \"boolean\" },",
							"    { field: \"additionalneeds\", type: \"string\" },",
							"",
							"];",
							"const bookingDatesFieldsDataTypes = [",
							"    { field: \"checkin\", type: \"string\" },",
							"    { field: \"checkout\", type: \"string\" },",
							"]",
							"",
							"const bookingFieldsVariables = [",
							"    {field: \"firstname\", value: updatedFirstName},",
							"    {field: \"lastname\", value: updatedLastName},",
							"    {field: \"totalprice\", value: updatedTotalPrice},",
							"    {field: \"depositpaid\", value: updatedDepositPaid},",
							"    {field: \"additionalneeds\", value: updatedAddNeeds}",
							"    ];",
							"",
							"const bookingFieldsDatesVariables = [",
							"    {field: \"checkin\", value: updatedCheckIn},",
							"    {field: \"checkout\", value: updatedCheckOut},",
							"];",
							"",
							"// ‚úÖüü¢ STATUS & PERFORMANCE TESTS",
							"pm.test(\"‚úÖ Status code is 200\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"‚è±Ô∏è Response time is under 500ms\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"// üö´‚ùå NULL / UNDEFINED FIELD CHECKS",
							"pm.test(\"üö´ Response fields are not null or undefined\", () => {",
							"    bookingFields.forEach((field) => {",
							"        pm.expect(bookingData[field], `Field ${field} is null or undefined`).to.not.be.oneOf([null, undefined]);",
							"    });",
							"    bookingDatesFields.forEach((field) => {",
							"        pm.expect(bookingData.bookingdates[field], `Field ${field} is null or undefined`).to.not.be.oneOf([null, undefined]);",
							"    });",
							"});",
							"",
							"// üîç‚úÖ FIELD PRESENCE TESTS",
							"pm.test(\"üîç Response contains all expected fields\", () => {",
							"    bookingFields.forEach((field) => {",
							"        pm.expect(bookingData, `Missing field ${field}`).to.have.property(field);",
							"    })",
							"    bookingDatesFields.forEach((field) => {",
							"        pm.expect(bookingData.bookingdates, `Missing field ${field} in bookingdates`).to.have.property(field);",
							"    });",
							"})",
							"",
							"// üìê‚úÖ DATA TYPE VALIDATION",
							"pm.test(\"üìê Response fields contain correct data types\", () => {",
							"    bookingFieldsDataTypes.forEach(({field, type}) => {",
							"        pm.expect(bookingData[field], `Field ${field} is not of type ${type}`).to.be.a(type);",
							"    });",
							"    bookingDatesFieldsDataTypes.forEach(({field, type}) => {",
							"        pm.expect(bookingData.bookingdates[field], `Field ${field} is not of type ${type}`).to.be.a(type);",
							"    });",
							"});",
							"",
							"// üîç‚úÖ VALUE CHECKS",
							"pm.test(\"üîç Response values match expected values\", () => {",
							"    bookingFieldsVariables.forEach(({field, value}) => {",
							"        pm.expect(bookingData[field]).to.eql(value);",
							"    })",
							"    bookingFieldsDatesVariables.forEach(({field, value}) => {",
							"        pm.expect(bookingData.bookingdates[field]).to.eql(value);",
							"    });",
							"});",
							"",
							"",
							"// üîê‚ùå AUTHENTICATION TEST ‚Äì PUT without token",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"baseUrl\")+\"/booking/\"+pm.environment.get(\"bookingId\"),",
							"    method: \"PUT\",",
							"    header: {",
							"        \"Content-Type\": \"application/json\",",
							"    },",
							"    body: {",
							"        mode: \"raw\",",
							"        raw: JSON.stringify({",
							"            \"firstname\": \"PUTRequest\",",
							"            \"lastname\": \"WithoutToken\",",
							"            \"totalprice\": 500,",
							"            \"depositpaid\": true,",
							"            \"bookingDates\": {",
							"                \"checkin\": 2025-01-15,",
							"                \"checkout\": 2025-01-30,",
							"            },",
							"            \"additionalneeds\": \"A token to send this request\",",
							"        })",
							"    }",
							"}, (err, res) => {",
							"    pm.test(\"üîê‚ùå Missing token on UPDATE request ‚û°Ô∏è 403 and 'Forbidden' üîç\", () => {",
							"        const resText = res.text();",
							"        pm.expect(res.code).to.eql(403);",
							"        pm.expect(resText).to.include(\"Forbidden\");",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// üìùüì¶ Parse Request Body",
							"const requestBody = pm.request.body.raw;",
							"const parsedBody = JSON.parse(requestBody);",
							"",
							"// üìåüíæ Set Environment Variables for Updated Booking Fields",
							"pm.environment.set(\"updatedFirstName\", parsedBody.firstname);",
							"pm.environment.set(\"updatedLastName\", parsedBody.lastname);",
							"pm.environment.set(\"updatedTotalPrice\", parsedBody.totalprice);",
							"pm.environment.set(\"updatedDepositPaid\", parsedBody.depositpaid);",
							"pm.environment.set(\"updatedCheckIn\", parsedBody.bookingdates.checkin);",
							"pm.environment.set(\"updatedCheckOut\", parsedBody.bookingdates.checkout);",
							"pm.environment.set(\"updatedAddNeeds\", parsedBody.additionalneeds);",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstname\": \"UpdatedFirstNameQA\",\n    \"lastname\": \"UpdatedLastNameQA\",\n    \"totalprice\": 123,\n    \"depositpaid\": false,\n    \"bookingdates\": {\n        \"checkin\": \"2025-01-01\",\n        \"checkout\": \"2025-01-15\"\n    },\n    \"additionalneeds\": \"I love API testing with Postman\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/booking/{{bookingId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"booking",
						"{{bookingId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Partial Update Booking",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const requestBody = pm.request.body.raw;",
							"const parsedBody = JSON.parse(requestBody);",
							"",
							"",
							"pm.environment.set(\"updatedFirstName\", parsedBody.firstname);",
							"pm.environment.set(\"updatedLastName\", parsedBody.lastname);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// üì¶ Parse response and set environment variables",
							"const bookingData = pm.response.json();",
							"",
							"const firstName = pm.environment.get(\"updatedFirstName\");",
							"const lastName =  pm.environment.get(\"updatedLastName\");",
							"",
							"// üß© Define expected fields",
							"",
							"const bookingFields = [",
							"    \"firstname\",",
							"    \"lastname\",",
							"    \"totalprice\",",
							"    \"depositpaid\",",
							"    \"additionalneeds\"",
							"]",
							"",
							"const bookingDatesFields = [",
							"    \"checkin\",",
							"    \"checkout\"",
							"]",
							"",
							"// üìê Define expected field types",
							"",
							"const bookingFieldsDataTypes = [",
							"    {field: \"firstname\", type: \"string\"},",
							"    {field: \"lastname\", type: \"string\"},",
							"    {field: \"totalprice\", type: \"number\"},",
							"    {field: \"depositpaid\", type: \"boolean\"},",
							"    {field: \"additionalneeds\", type: \"string\"},",
							"];",
							"",
							"const bookingDateFieldsDataTypes = [",
							"    {field: \"checkin\", type: \"string\"},",
							"    {field: \"checkout\", type: \"string\"}",
							"]",
							"",
							"// ‚úÖüü¢ STATUS & PERFORMANCE TESTS",
							"pm.test(\"‚úÖ Status code is 200\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"‚è±Ô∏è Response time is under 500ms\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"// üö´‚ùå NULL / UNDEFINED FIELD CHECKS",
							"pm.test(\"üö´ Response fields are not null or undefined\", () => {",
							"    bookingFields.forEach((field) => {",
							"        pm.expect(bookingData[field], `Field ${field} is null or undefined`).to.not.be.oneOf([null, undefined]);",
							"    });",
							"    bookingDatesFields.forEach((field) => {",
							"        pm.expect(bookingData.bookingdates[field], `Field ${field} is null or undefined`).to.not.be.oneOf([null, undefined]);",
							"    })",
							"});",
							"",
							"// üîç‚úÖ FIELD PRESENCE TESTS",
							"pm.test(\"üîç Response contains all expected fields\", () => {",
							"    bookingFields.forEach((field) => {",
							"        pm.expect(bookingData, `Missing ${field} field`).to.have.property(field);",
							"    });",
							"    bookingDatesFields.forEach((field) => {",
							"        pm.expect(bookingData.bookingdates, `Missing ${field} in bookingfields`).to.have.property(field);",
							"    });",
							"});",
							"",
							"// üìê‚úÖ DATA TYPE VALIDATION",
							"pm.test(\"üìê Response fields contain correct data types\", () => {",
							"    bookingFieldsDataTypes.forEach(({field, type}) => {",
							"        pm.expect(bookingData[field], `Field ${field} is not of type ${type}`).to.be.a(type);",
							"    });",
							"    bookingDateFieldsDataTypes.forEach(({field, type}) => {",
							"        pm.expect(bookingData.bookingdates[field], `Field ${field} in bookingdates is not of type ${type}`).to.be.a(type);",
							"    });",
							"});",
							"",
							"// üîç‚úÖ VALUE CHECKS",
							"pm.test(\"üîç Response values match expected values\", () => {",
							"    pm.expect(bookingData.firstname).to.eql(firstName);",
							"    pm.expect(bookingData.lastname).to.eql(lastName);",
							"    });",
							"",
							"",
							"// üîê‚ùå AUTHENTICATION TEST ‚Äì PATCH without token",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"baseUrl\")+\"/booking/\"+pm.environment.get(\"bookingId\"),",
							"    method: \"PATCH\",",
							"    header: {",
							"        \"Content-Type\": \"application/json\"",
							"    },",
							"    body:{",
							"        mode: \"raw\",",
							"        raw: JSON.stringify({",
							"            \"firstname\": \"FirstName\",",
							"            \"lastname\": \"WithoutToken\",",
							"        })",
							"    }",
							"}, (err, res) => {",
							"    pm.test(\"üîê PATCH request without token ‚û°Ô∏è 403 and 'Forbidden' üîç\", () => {",
							"        pm.expect(res.code).to.eql(403)",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstname\": \"UpdatedFirstNameQA2\",\n    \"lastname\": \"UpatedLastNameQA2\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/booking/{{bookingId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"booking",
						"{{bookingId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ‚úÖüü¢ STATUS & PERFORMANCE TESTS",
							"pm.test(\"‚úÖ Status code is 201\", () => {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"‚è±Ô∏è Response time is under 500ms\", () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"// üß™‚úÖ DATA VALIDATION TESTS",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"baseUrl\") + \"/booking/\" + pm.environment.get(\"bookingId\"),",
							"    method: \"GET\",",
							"}, (err, res) => {",
							"    pm.test(\"üßπ Booking ID is deleted and can't be fetched (GET returns 404)\", () => {",
							"        pm.expect(res.code).to.eql(404);",
							"    });",
							"});",
							"",
							"// üîê‚ùå AUTHENTICATION TEST ‚Äì DELETE without token",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"baseUrl\")+\"/booking/\"+pm.environment.get(\"bookingId\"),",
							"    method: \"DELETE\",",
							"}, (err, res) => {",
							"    pm.test(\"üîê‚ùå Delete without token returns 403\", () => {",
							"        pm.expect(res.code).to.eql(403);",
							"})",
							"});",
							"",
							"// üßπüßº ENVIRONMENT CLEANUP ‚Äì Unset all temporary variables after DELETE",
							"pm.environment.unset(\"bookingId\");",
							"pm.environment.unset(\"firstName\");",
							"pm.environment.unset(\"lastName\");",
							"pm.environment.unset(\"totalPrice\");",
							"pm.environment.unset(\"depositPaid\");",
							"pm.environment.unset(\"checkIn\");",
							"pm.environment.unset(\"checkOut\");",
							"pm.environment.unset(\"addNeeds\");",
							"pm.environment.unset(\"updatedFirstName\");",
							"pm.environment.unset(\"updatedLastName\");",
							"pm.environment.unset(\"updatedTotalPrice\");",
							"pm.environment.unset(\"updatedDepositPaid\");",
							"pm.environment.unset(\"updatedCheckIn\");",
							"pm.environment.unset(\"updatedCheckOut\");",
							"pm.environment.unset(\"updatedAddNeeds\");",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/booking/{{bookingId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"booking",
						"{{bookingId}}"
					]
				}
			},
			"response": []
		}
	]
}